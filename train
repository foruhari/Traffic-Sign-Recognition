import os
import pandas as pd
import shutil


os_dir ='The direcory to your Images in a dataset'
for dir in os.listdir(os_dir):
    if dir == '.DS_Store' :
        continue
    inner_dir = os.path.join(os_dir, dir)
    print(inner_dir[-5:])
    for img in os.listdir(inner_dir):
        if img == "GT-" + dir + '.csv':
            csv_file = pd.read_csv(os.path.join(inner_dir,"GT-" + dir + '.csv'), sep=';')
            csv_file['Filename'] = csv_file['Filename'].apply(lambda x: f'{inner_dir[-5:]}_{x}')
            csv_file.to_csv(f'{inner_dir}/GGT-{dir}.csv', sep=';',index = False)
        else:
            continue
            os.rename(inner_dir + '/' + img, inner_dir + '/' + f'{inner_dir[-5:]}_{img}')




train_csv = pd.DataFrame()
for dir in os.listdir(os_dir):
    if dir == '.DS_Store' :
        continue
    inner_dir = os.path.join(os_dir, dir)
    csv_file = pd.read_csv(os.path.join(inner_dir,"GGT-" + dir + '.csv'), sep=';')

    train_csv = train_csv.append(csv_file)
print(train_csv.shape)


train_csv.head()
     

IMG_PATH = 'New images directory'
     

cd .../traffic/TFinal
     

def compare(v1, v2):
    if v1 > v2:
        vmax, vmin = v1, v2
        return vmax, vmin
    else:
        vmax, vmin = v2, v1
        return vmax, vmin
def convert_labels(z):
    x1 = z['Roi.X1']
    y1 = z['Roi.Y1']
    x2 = z['Roi.X2']
    y2 = z['Roi.Y2']
    size = [z['Height'],z['Width']]
    xmax, xmin = compare(x1, x2)
    ymax, ymin = compare(y1, y2)
    dw = 1./size[1]
    dh = 1./size[0]
    x = (xmin + xmax)/2.0
    y = (ymin + ymax)/2.0
    w = xmax - xmin
    h = ymax - ymin
    x = x*dw
    w = w*dw
    y = y*dh
    h = h*dh
    return x,y,w,h
     

for index, x in train_csv.iterrows():
    name = x['Filename'].replace('.ppm','.txt')
    labels = convert_labels(x)
    cls = x['ClassId']
    f = open(f'{name}','w+')
    f.write(f'{cls} {labels[0]} {labels[1]} {labels[2]} {labels[3]}')
    f.close()


y = train_csv['ClassId'] ## For stratification
     

from sklearn.model_selection import train_test_split
train_ds, valid_ds = train_test_split(
    train_csv,
    test_size = 0.3,
    random_state = 43,
    shuffle = True,
    stratify = y
)
     

train_ds.reset_index()
valid_ds.reset_index()


f = open(f'train.txt','w+')
for index, x in train_ds.iterrows():
    name = x['Filename']
    f.write(f'TFinal/{name}\n')
f.close()
     

f = open(f'test.txt','w+')
for index, x in valid_ds.iterrows():
    name = x['Filename']
    f.write(f'TFinal/{name}\n')
f.close()


## creat_a_file_"classes.names" ##

classes = [
    'Speed limit (20km/h)',
    'Speed limit (30km/h)',
    'Speed limit (50km/h)',
    'Speed limit (60km/h)',
    'Speed limit (70km/h)',
    'Speed limit (80km/h)',
    'Speed limit (100km/h)',
    'Speed limit (120km/h)',
    'Stop',
    'No entry',
]

f = open(f'classes.names','w+')
for c in classes:
    f.write(f'{c}\n')
f.close()

## create_a_file_"labelled_data.data" ##

config = {
    'classes': 10,
    'train': 'TFinal/train.text',
    'valid': 'TFinal/valid.text',
    'names': 'classes.names',
    'backup': 'backup'
}
f = open(f'labelled_data.data', 'w+')
for key in config:
    f.write(f'{key} = {config[key]}\n')
f.close()




#To_train_the_model:
#detector train labelled_data.data "directory of configs" "directory of weights" -dont_show -map    
